# assigned actual churn label to targeted M3 users
target.user.4[, label:=factor(as.numeric(churn.bool), levels = c(1,0), labels = c('Y','N'))]
# turn character into factor vector
char.col <- sapply(target.user.4, class) %>% `==`('character')
char.col <- colnames(target.user.4)[char.col]
f.char2factor <- function(name){
name <- as.name(name)
target.user.4[, eval(name):=as.factor(eval(name))]
}
return.null <- sapply(char.col, f.char2factor)
mydata.colname <- colnames(target.user.4)
rmv.colname <- mydata.colname[grepl('M([3-8])', mydata.colname, fixed = F, ignore.case = T)]
rmv.colname <- c(rmv.colname, 'dob_ID', 'Dormant_Flagged','Lapsed_Flagged')
target.user.4[, (rmv.colname):=NULL]
prediction.prop <- predict(fit.tree, target.user.4, na.action = na.pass, type = 'prob')
head(prediction.prop)
prediction <- predict(fit.tree, target.user.4, na.action = na.pass, type = 'prob')['Y']
prediction.true.churn.count <- target.user.4$label == 'Y' %>% sum
prediction.true.churn.count <- (target.user.4$label == 'Y') %>% sum
prediction.lift <- data.table(label = target.user.4$label, prop = prediction)
prediction.lift[, bin:=cut(prop, c(0, threshold.prop, 1), include.lowest = T)]
head(prediction.lift)
prediction.lift <- data.table(label = target.user.4$label, prop = prediction[[1]])
prediction.lift[, bin:=cut(prop, c(0, threshold.prop, 1), include.lowest = T)]
prediction.lift <- data.table(label = target.user.4$label, prop = prediction$Y)
prediction.lift[, bin:=cut(prop, c(0, threshold.prop, 1), include.lowest = T)]
head(prediction.lift)
prediction.lift <- data.table(label = target.user.4$label, prop = prediction$Y)
prediction.lift[, bin:=cut(prop, c(0, threshold.prop, 1), include.lowest = T, right = F)]
head(prediction.lift)
prediction.lift <- data.table(label = target.user.4$label, prop = prediction$Y)
prediction.lift[, bin:=cut(prop, c(0, threshold.prop, 1), include.lowest = T, right = F)]
prediction.lift.chart <- prediction.lift[, .(bin.count = .N, churn.bin.count = sum(label == T)), bin]
setorder(prediction.lift.chart, -bin)
prediction.lift.chart[, ':='(cum.bin.count = cumsum(bin.count), churn.bin.perc = churn.bin.count/bin.count, cum.churn.bin.count = cumsum(churn.bin.count))]
prediction.lift.chart[, ':='(cum.bin.perc = cum.bin.count/prediction.pop.count, cum.churn.bin.perc = cum.churn.bin.count/cum.bin.count)]
prediction.lift.chart[, ':='(cum.churn.all.perc = cum.churn.bin.count/prediction.true.churn.count)]
prediction.true.churn.count <- (target.user.4$label == 'Y') %>% sum
prediciton.pop.count <- nrow(target.user.4)
prediction.lift <- data.table(label = target.user.4$label, prop = prediction$Y)
prediction.lift[, bin:=cut(prop, c(0, threshold.prop, 1), include.lowest = T, right = F)]
prediction.lift.chart <- prediction.lift[, .(bin.count = .N, churn.bin.count = sum(label == T)), bin]
setorder(prediction.lift.chart, -bin)
prediction.lift.chart[, ':='(cum.bin.count = cumsum(bin.count), churn.bin.perc = churn.bin.count/bin.count, cum.churn.bin.count = cumsum(churn.bin.count))]
prediction.lift.chart[, ':='(cum.bin.perc = cum.bin.count/prediction.pop.count, cum.churn.bin.perc = cum.churn.bin.count/cum.bin.count)]
prediction.lift.chart[, ':='(cum.churn.all.perc = cum.churn.bin.count/prediction.true.churn.count)]
prediciton.pop.count
prediction.true.churn.count <- (target.user.4$label == 'Y') %>% sum
prediction.pop.count <- nrow(target.user.4)
prediction.lift <- data.table(label = target.user.4$label, prop = prediction$Y)
prediction.lift[, bin:=cut(prop, c(0, threshold.prop, 1), include.lowest = T, right = F)]
prediction.lift.chart <- prediction.lift[, .(bin.count = .N, churn.bin.count = sum(label == T)), bin]
setorder(prediction.lift.chart, -bin)
prediction.lift.chart[, ':='(cum.bin.count = cumsum(bin.count), churn.bin.perc = churn.bin.count/bin.count, cum.churn.bin.count = cumsum(churn.bin.count))]
prediction.lift.chart[, ':='(cum.bin.perc = cum.bin.count/prediction.pop.count, cum.churn.bin.perc = cum.churn.bin.count/cum.bin.count)]
prediction.lift.chart[, ':='(cum.churn.all.perc = cum.churn.bin.count/prediction.true.churn.count)]
prediction.lift.chart
prediction.lift %>% head
prediction.lift.chart <- prediction.lift[, .(bin.count = .N, churn.bin.count = sum(label == 'Y')), bin]
setorder(prediction.lift.chart, -bin)
prediction.lift.chart[, ':='(cum.bin.count = cumsum(bin.count), churn.bin.perc = churn.bin.count/bin.count, cum.churn.bin.count = cumsum(churn.bin.count))]
prediction.lift.chart[, ':='(cum.bin.perc = cum.bin.count/prediction.pop.count, cum.churn.bin.perc = cum.churn.bin.count/cum.bin.count)]
prediction.lift.chart[, ':='(cum.churn.all.perc = cum.churn.bin.count/prediction.true.churn.count)]
prediction.lift.chart
plot.lift <- ggplot(testing.lift.chart) + geom_line(aes(x = cum.count.bin.perc, y = cum.churn.all.perc, color = 'model')) + geom_line(aes(x = cum.rand.churn.all.perc, y = cum.rand.churn.all.perc, color = 'baseline')) + theme_bw() + scale_color_manual(name = '', values = c('model' = 'red', 'baseline' = 'black')) + theme(legend.key = element_blank()) + labs(title = title1, x = 'Cum. % of Customers Targeted', y = 'Cum. % of Churners of All Churners Captured')
plot.lift
title1 = 'Cum. % of Churner of All Churners Captured vs Cum. % of Customer Targeted'
plot.lift <- ggplot(testing.lift.chart) + geom_line(aes(x = cum.count.bin.perc, y = cum.churn.all.perc, color = 'model')) + geom_line(aes(x = cum.rand.churn.all.perc, y = cum.rand.churn.all.perc, color = 'baseline')) + theme_bw() + scale_color_manual(name = '', values = c('model' = 'red', 'baseline' = 'black')) + theme(legend.key = element_blank()) + labs(title = title1, x = 'Cum. % of Customers Targeted', y = 'Cum. % of Churners of All Churners Captured')
plot.lift
plot.lift + geom_hline(aes(yintercept = cum.churn.captured, linetype = 'out of time')) + geom_vline(aes(xintercept = cum.targeted.cust, linetype = 'out of time')) + scale_linetype_manual(names = '', values = c('out of time' = 2))
plot.lift + geom_hline(aes(yintercept = cum.churn.captured, linetype = 'out of time')) + geom_vline(aes(xintercept = cum.targeted.cust, linetype = 'out of time')) + scale_linetype_manual(name = '', values = c('out of time' = 2))
cum.targeted.cust <- prediction.lift.chart[1, cum.bin.perc]
cum.churn.captured <- prediction.lift.chart[1, cum.churn.all.perc]
plot.lift + geom_hline(aes(yintercept = cum.churn.captured, linetype = 'out of time')) + geom_vline(aes(xintercept = cum.targeted.cust, linetype = 'out of time')) + scale_linetype_manual(name = '', values = c('out of time' = 2))
a = 1
ggplot()+geom_abline(slope = 2, intercept = 1)
ggplot()+geom_abline(slope = 2, intercept = 1) + xlim(0,1)
ggplot()+geom_abline(slope = 2, intercept = 1) + xlim(0,1) + ylim(0,Inf)
ggplot()+geom_abline(slope = 2, intercept = 1) + xlim(0,1) + ylim(0,100)
library(manipulate)
x.prop = seq(0,1,.05)
N.slider <- slider(0,100000, initial = 500, label = 'N', step = 500)
VC.slider <- slider(0, 50, initial = 5, label = 'VC', step = 5)
FC.slider <- slider(0, 100000, initial = 10000, label = 'FC', step = 1000)
manipulate(
(ggplot()+geom_abline(slope = N*VC, intercept = FC) + xlim(0,1) + ylim(0,100)), N = N.slider, VC = VC.slider, FC = FC.slider
)
manipulate(
(ggplot()+geom_line(aes(x = x.prop, y = x.prop*VC-FC))), N = N.slider, VC = VC.slider, FC = FC.slider
)
manipulate(
(ggplot()+geom_line(aes(x = x.prop, y = x.prop*VC + FC))), N = N.slider, VC = VC.slider, FC = FC.slider
)
manipulate(
(ggplot()+geom_line(aes(x = x.prop, y = x.prop*VC + FC, color = 'cost')) + geom_line(x = x.prop, y = x.prop*N*FC*rdr*ARPU*sens, color = 'revenue')
+ scale_color_manual(name='', values=c('cost'='black','revenue'='red'))), N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider
)
x.prop = seq(0,1,.05)
N.slider <- slider(0,100000, initial = 500, label = 'N', step = 500)
VC.slider <- slider(0, 50, initial = 5, label = 'VC', step = 5)
FC.slider <- slider(0, 100000, initial = 10000, label = 'FC', step = 1000)
rdr.slider <- slider(0,1,initial = .1, label = 'ReductionRate', step = .01)
ARPU.slider <- slider(0,500, initial = 100, label='ARPU', step = 50)
sens.slider <- slider(0,1,initial=.1, label = 'recallRate', step = .05)
manipulate(
(ggplot()+geom_line(aes(x = x.prop, y = x.prop*VC + FC, color = 'cost')) + geom_line(x = x.prop, y = x.prop*N*FC*rdr*ARPU*sens, color = 'revenue')
+ scale_color_manual(name='', values=c('cost'='black','revenue'='red'))), N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider
)
manipulate(
(ggplot()+geom_line(aes(x = x.prop, y = x.prop*VC + FC, color = 'cost')) + geom_line(x = x.prop, y = x.prop*N*rdr*ARPU*sens, color = 'revenue')
+ scale_color_manual(name='', values=c('cost'='black','revenue'='red'))), N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider
)
manipulate(
(ggplot()+geom_line(aes(x = x.prop, y = x.prop*VC + FC, color = 'cost')) + geom_line(aes(x = x.prop, y = x.prop*N*rdr*ARPU*sens, color = 'revenue'))
+ scale_color_manual(name='', values=c('cost'='black','revenue'='red'))), N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider
)
manipulate(
(ggplot()+geom_line(aes(x = x.prop, y = x.prop*VC + FC, color = 'cost')) + geom_line(aes(x = x.prop, y = x.prop*N*rdr*ARPU*sens, color = 'revenue'))
+ scale_color_manual(name='', values=c('cost'='black','revenue'='red'))+theme_bw()), N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider
)
manipulate(
(ggplot()+geom_line(aes(x = x.prop, y = x.prop*VC + FC, color = 'cost')) + geom_line(aes(x = x.prop, y = x.prop*N*rdr*ARPU*sens, color = 'revenue'))
+ scale_color_manual(name='', values=c('cost'='black','revenue'='red'))+theme_bw())
, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider
)
manipulate(
(ggplot()+geom_line(aes(x = x.prop, y = (x.prop*N*rdr*ARPU*sens)-(x.prop*VC + FC))) + theme_bw()+ labs(x='% of targeted customer', y = 'Profit/Loss')
, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
manipulate(
(ggplot()+geom_line(aes(x = x.prop, y = (x.prop*N*rdr*ARPU*sens)-(x.prop*VC + FC))) + theme_bw()+ labs(x='% of targeted customer', y = 'Profit/Loss'))
, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
sens.slider <- slider(0,1,initial=.1, label = 'recallRate', step = .05)
manipulate(
(ggplot()+geom_line(aes(x = x.prop, y = (x.prop*N*rdr*ARPU*sens)-(x.prop*VC + FC))) + theme_bw()+ labs(x='% of to be targeted from group', y = 'Profit/Loss'))
, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
manipulate({
(ggplot()+geom_line(aes(x = x.prop, y = (x.prop*N*rdr*ARPU*sens)-(x.prop*VC + FC))) + theme_bw()+ labs(x='% of to be targeted from group', y = 'Profit/Loss'))
}
, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
manipulate({
x.data <- x.prop;
y.data <- (x.prop*N*rdr*ARPU*sens)-(x.prop*VC + FC);
(ggplot()+geom_line(aes(x = x.prop, y = y.data)) + theme_bw()+ labs(x='% of to be targeted from group', y = 'Profit/Loss'))
}
, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
manipulate({
x.data <- x.prop;
y.data <- (x.prop*N*rdr*ARPU*sens)-(x.prop*VC + FC);
(ggplot()+geom_line(aes(x = x.prop, y = y.data), color = ifelse(max(y.data>0, 'black','red'))) + theme_bw()+ labs(x='% of to be targeted from group', y = 'Profit/Loss'))
}
, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
manipulate({
x.data <- x.prop;
y.data <- (x.prop*N*rdr*ARPU*sens)-(x.prop*VC + FC);
ggplot()+geom_line(aes(x = x.prop, y = y.data, color = ifelse(max(y.data>0, 'black','red')))) + theme_bw()+ labs(x='% of to be targeted from group', y = 'Profit/Loss')
}
, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
manipulate({
x.data <- x.prop;
y.data <- (x.prop*N*rdr*ARPU*sens)-(x.prop*N*VC + FC);
ggplot()+geom_line(aes(x = x.prop, y = y.data, color = ifelse(max(y.data>0, 'black','red')))) + theme_bw()+ labs(x='% of to be targeted from group', y = 'Profit/Loss')
}
, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
manipulate({
x.data <- x.prop;
y.data <- (x.prop*N*rdr*ARPU*sens)-(x.prop*N*VC + FC);
ggplot()+geom_line(aes(x = x.data, y = y.data, color = ifelse(max(y.data>0, 'black','red')))) + theme_bw()+ labs(x='% of to be targeted from group', y = 'Profit/Loss')
}
, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
manipulate({
x.data <- x.prop;
y.data <- (x.prop*N*rdr*ARPU*sens)-(x.prop*N*VC + FC);
ggplot()+geom_line(aes(x = x.data, y = y.data)) + theme_bw()+ labs(x='% of to be targeted from group', y = 'Profit/Loss')
}, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
manipulate({
x.data <- x.prop;
y.data <- (x.prop*N*rdr*ARPU*sens)-(x.prop*N*VC + FC);
clr <- ifelse(max(y.data)>0, 'black','red');
ggplot()+geom_line(aes(x = x.data, y = y.data)) + theme_bw()+ labs(x='% of to be targeted from group', y = 'Profit/Loss')
}, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
manipulate({
x.data <- x.prop;
y.data <- (x.prop*N*rdr*ARPU*sens)-(x.prop*N*VC + FC);
clr <- ifelse(max(y.data)>0, 'black','red');
ggplot()+geom_line(aes(x = x.data, y = y.data),color = clr) + theme_bw()+ labs(x='% of to be targeted from group', y = 'Profit/Loss')
}, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
install.packages('ElemStatLearn')
install.packages('pgmm')
install.packages('gbm')
install.packages('forecast')
install.packages('e1071')
library(ElemStatLearn)
data("vowel.train")
data(vowel.test)
colnames(vowel.train)
summary(vowel.test$y)
table(vowel.train$y)
vowel.train$y = factor(vowel.train$y)
vowel.test$y  <- factor(vowel.test$y)
set.seed(33833)
fit.rf <- train(y~., vowel.train, method = 'rf')
set.seed(33833)
rf.result <- predict(fit.rf, vowel.test)
head(rf.result)
confusionMatrix(rf.result, vowel.test$y)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(1)
runif(3)
runif(3)
runif(3)
set.seed(1)
runif(3)
set.seed(62433)
fit.rf <- train(diagnosis, data = training, method = 'rf')
set.seed(62433)
fit.rf <- train(diagnosis~., data = training, method = 'rf')
set.seed(62433)
fit.gbm <- train(diagnosis~., data = training, method = 'gbm')
set.seed(62433)
fit.lda <- train(diagnosis~., data = training, method = 'lda')
library(caret)
pred.rf <- predict(fit.rf, testing)
pred.lda <- predict(fit.lda, testing)
pred.gbm <- predict(fit.gbm, testing)
training.stack <- data.frame(rf = pred.rf, lda=pred.lda, gbm=pred.gbm, diagnosis = training$diagnosis)
pred.gbm.train <- predict(fit.gbm, training)
pred.rf.train <- predict(fit.rf, training)
pred.lda.train <- predict(fit.lda, training)
training.stack <- data.frame(rf = pred.rf.train, lda=pred.lda.train, gbm=pred.gbm.train, diagnosis = training$diagnosis)
fit.stack <- train(diagnosis~., data = training.stack, method = 'rf')
pred.stact <- predict(fit.stack, testing)
dim(testing)
testing.stack <- data.frame(rf=pred.rf, lda=pred.lda, gbm=pred.gba, diagnosis = testing$diagnosis)
testing.stack <- data.frame(rf=pred.rf, lda=pred.lda, gbm=pred.gbm, diagnosis = testing$diagnosis)
pred.stack <- predict(fit.stack, testing.stack)
confusionMatrix(pred.rf, testing$diagnosis)
set.seed(62433)
fit.stack <- train(diagnosis~., data = training.stack, method = 'rf')
pred.stact <- predict(fit.stack, testing)
testing.stack <- data.frame(rf=pred.rf, lda=pred.lda, gbm=pred.gba, diagnosis = testing$diagnosis)
testing.stack <- data.frame(rf=pred.rf, lda=pred.lda, gbm=pred.gbm, diagnosis = testing$diagnosis)
pred.stack <- predict(fit.stack, testing.stack)
confusionMatrix(pred.rf, testing$diagnosis)
confusionMatrix(pred.rf, testing$diagnosis) %>% names
confusionMatrix(pred.rf, testing$diagnosis)$overall[1]
confusionMatrix(pred.rf, testing$diagnosis)$overall[1]
confusionMatrix(pred.lda, testing$diagnosis)$overall[1]
confusionMatrix(pred.gbm, testing$diagnosis)$overall[1]
confusionMatrix(pred.stack, testing$diagnosis)$overall[1]
getwd()
setwd('/Users/Daniel/COURSERA DATA SCIENCE/coursera_machine_learning_assignment')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv','pml-training.csv', method = 'curl')
download.file('https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv','pml-testing.csv', method = 'curl')
dataset <- fread('pml-training.csv', sep = ',')
dim(dataset)
colnames(dataset)
table(dataset$classe)
sapply(dataset, class)
table(dataset$kurtosis_picth_forearm )
class(data.table)
class(dataset)
dataset$kurtosis_picth_forearm %>% as.numeric() %>% summary()
dataset$kurtosis_picth_forearm %>% as.numeric() %>% is.na() %>% sum()
dataset$kurtosis_picth_forearm %>% as.numeric() %>% is.na() %>% sum() %>% `/`(nrow(dataset))
dataset[sample(1:nrow(dataset), 100)]
sapply(dataset, function(x) {sum(is.na(x))/length(x)})
str(dataset)
getwd()
dataset <- fread('pml-training.csv', sep= ',')
testing <- fread('pml-testing.csv', sep=',')
dim(dataset)
rmvColumn <- sapply(dataset, function(x){
(sum(is.na(x))/length(x))>=0.7
})
rmvColumn <- colnames(dataset)[rmvColumn]
dataset[,(rmvColumn):=NULL]
str(dataset)
pattern = '(avg|var|kurtosis|skew|max|min)'
statVar <- grep(pattern, colnames(dataset),ignore.case = T, value = T)
statVar
pattern = '(avg|var|kurtosis|skew|max|min|amplitude)'
statVar <- grep(pattern, colnames(dataset),ignore.case = T, value = T)
dataset[, (statVar):=NULL]
pattern <- '(timestamp|window)'
timeVar <- grep(pattern, colnames(dataset), ignore.case = T, value = T)
dataset[, (timeVar):=NULL]
colnames(dataset)
dataset[, V1:=NULL]
colnames(dataset)
str(dataset)
dataset[, classe:=factor(classe)]
str(dataset)
require(corrplot)
corrplot(select(dataset, -classe, -user_name))
corrMatrix <- cor(select(dataset, -classe, -user_name))
library(dplyr)
corrplot(dplyr::select(dataset, -classe, -user_name), is.corr=F, type = 'upper')
corrplot(dplyr::select(dataset, -classe, -user_name) %>% as.matrix(), is.corr=F, type = 'upper')
corrplot(dplyr::select(dataset, -classe, -user_name) %>% as.matrix(), is.corr=F, type = 'upper', add =F)
corrplot(dplyr::select(dataset, -classe, -user_name) %>% as.matrix(), is.corr=F, type = 'upper', add =F)
corrplot(dplyr::select(dataset, -classe, -user_name) %>% as.matrix(), is.corr=F, type = 'upper', add =F)
corMatrix <- cor(dplyr::select(dataset, -classe, -user_name)
)
corMatrix
corMatrix %>% class
corrplot(corMatrix, type = 'upper', add =F)
corrplot(corMatrix, type = 'upper', add =F, diag = F, lt.cex = .5)
corrplot(corMatrix, type = 'upper', add =F, diag = F, lt.cex = .5, tl.col = 'black')
corrplot(corMatrix, type = 'upper', add =F, diag = F, lt.cex = 1, tl.col = 'black')
corrplot(corMatrix, type = 'upper', add =F, diag = F, tl.cex = .5, tl.col = 'black')
corrplot(corMatrix, add =F, diag = F, tl.cex = .5, tl.col = 'black', title = 'Correlation Plot')
table(dataset[,classe])
table(dataset[,classe]) %>% prop.table
table(dataset[,classe]) %>% prop.table %>% data.table()
targetTable <- table(dataset[, classe]) %>% prop.table() %>% data.table
setnames(targetTable, c('V1','N'),c('Class', 'Proportion'))
targetTable
kable(targetTable, caption = 'Proportion of Label Class in Training Set')
dim(dataset)
intrain <- createDataPartition(dataset$classe, p = .6, list = F)
training <- dataset[intrain,]
validation <- dataset[-intrain,]
set.seed(123)
intrain <- createDataPartition(dataset$classe, p = .6, list = F)
training <- dataset[intrain,]
validation <- dataset[-intrain,]
set.seed(124)
trcontrol <- trainControl(method = 'cv', number = '5')
fit.rf <- train(classe~., select(training, -user_name), method = 'rf')
colnames(dataset)
set.seed(124)
trcontrol <- trainControl(method = 'cv', number = '5')
fit.rf <- train(classe~., dplyr::select(training, -user_name), method = 'rf')
fit.rf
colnames(training)
set.seed(124)
trcontrol <- trainControl(method = 'cv', number = '5')
fit.rf <- train(classe~., dplyr::select(training, -user_name), method = 'rf', importance = T, trControl = trcontrol)
fit.rf$finalModel
varImp(fit.rf)
varImp(fit.rf)$importance
head(training)
fit.rf <- train(x = dplyr::select(training, -user_name, -classe), y = training$classe, method = 'rf', trControl = trcontrol, importance = T, na.action = na.pass)
fit.rf
training
fit.rf <- train(x = dplyr::select(training, -user_name, -classe), y = training$classe, method = 'parRF', trControl = trcontrol, importance = T, na.action = na.pass)
class(str(dataset))
str(dataset) %>% class
?cut2
cut2(sample.int(30, 100, replace = T), g = 10, oneval=F)
a = sample.int(30,100,replace = T)
a.dt <- data.table(value = a, bin = cut2(a, g = 10, oneva=F))
a.dt[, .N, bin]
a.dt[, .N, bin][,N] %>% sum
a.dt1 <- a.dt[, .N, bin][,N] %>% sum
a.dt1 <- a.dt[, .N, bin]
a.dt1
a.dt1[, cumsum = cumsum(N)]
a.dt1[, cumsum := cumsum(N)]
a.dt1
a = sample.int(10,100,replace = T)
a.dt <- data.table(value = a, bin = cut2(a, g = 10, oneva=F))
a.dt
a.dt1 <- a.dt[, .N, bin]
a,dt1
a.dt1
a.dt1[, cumsum := cumsum(N)]
a.dt1
x.prop = seq(0,1,.05)
N.slider <- slider(0,100000, initial = 500, label = 'N', step = 500)
VC.slider <- slider(0, 50, initial = 5, label = 'VC', step = 5)
FC.slider <- slider(0, 100000, initial = 10000, label = 'FC', step = 1000)
rdr.slider <- slider(0,1,initial = .1, label = 'ReductionRate', step = .01)
ARPU.slider <- slider(0,500, initial = 100, label='ARPU', step = 50)
sens.slider <- slider(0,1,initial=.1, label = 'recallRate', step = .05)
manipulate({
x.data <- x.prop;
y.data <- (x.prop*N*rdr*ARPU*sens)-(x.prop*N*VC + FC);
clr <- ifelse(max(y.data)>0, 'black','red');
ggplot()+geom_line(aes(x = x.data, y = y.data),color = clr) + theme_bw()+ labs(x='% of to be targeted from group', y = 'Profit/Loss')
}, N = N.slider, VC = VC.slider, FC = FC.slider, rdr = rdr.slider, ARPU = ARPU.slider, sens=sens.slider)
fit.rf <- randomForest(x = dplyr::select(training, -user_name, -classe), y = training$classe, ntree = 50, importance = T, na.action = na.pass)
fit.rf
pred <- predict(fit.rf, testing, na.action = na.pass)
pred <- predict(fit.rf, validation, na.action = na.pass)
confusionMatrix(pred, validation$classe)
names(fit.rf)
fit.rf$importance
fit.rf$local.importance
fit.rf$localImportance
fit.rf$importance %>% dim()
varImp(fit.rf)
fit.rf %>% names
confusionMatrix.train(fit.rf)
set.seed(124)
fit.rf <- randomForest(x = dplyr::select(training, -user_name, -classe)), y = training$classe, ntree = 50, na.action = na.pass, importance = T)
set.seed(124)
fit.rf <- randomForest(x = dplyr::select(training, -user_name, -classe), y = training$classe, ntree = 50, na.action = na.pass, importance = T)
fit.rf
fit.rf
fitImp <- fit.rf$importance
fitImp <- data.table(variable = rownames(fitImp), MeanDecreaseAccuracy = fitImp[, 'MeanDecreaseAccuracy'])
fitImp
fitImp[, variable:=reorder(variable, -MeanDecreaseAccuracy)]
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = MeanDecreaseAccuracy), linetype = 2, color = 'grey')
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = MeanDecreaseAccuracy), linetype = 2, color = 'grey') + theme_bw()
fitImp[, variable:=reorder(variable, MeanDecreaseAccuracy)]
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = MeanDecreaseAccuracy), linetype = 2, color = 'grey') + theme_bw()
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = MeanDecreaseAccuracy), linetype = 'dash', color = 'grey') + theme_bw()
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = MeanDecreaseAccuracy), linetype = 'dotdash', color = 'grey') + theme_bw()
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = MeanDecreaseAccuracy), linetype = 'dotdash', color = 'red') + theme_bw()
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = as.numeric(MeanDecreaseAccuracy)), linetype = 'dotdash', color = 'red') + theme_bw()
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = variable), linetype = 'dotdash', color = 'red') + theme_bw()
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = as.numeric(variable)), linetype = 'dotdash', color = 'red') + theme_bw()
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = as.numeric(variable)), linetype = 'dash', color = 'grey') + theme_bw()
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = as.numeric(variable)), linetype = '2', color = 'grey') + theme_bw()
ggplot(fitImp) + geom_point(aes(x = MeanDecreaseAccuracy, y = variable)) + geom_hline(aes(yintercept = as.numeric(variable)), linetype = 2, color = 'grey') + theme_bw()
ggplot(fitImp)+ geom_hline(aes(yintercept = as.numeric(variable)), linetype = 2, color = 'grey') + geom_point(aes(x = MeanDecreaseAccuracy, y = variable))  + theme_bw()
ggplot(fitImp) + geom_hline(aes(yintercept = as.numeric(variable)), linetype = 2, color = 'grey')
ggplot(fitImp) + geom_hline(aes(yintercept = as.numeric(variable)), linetype = 2, color = 'grey') + geom_point(aes(x = MeanDecreaseAccuracy, y = variable))  + theme_bw()
ggplot(fitImp) + geom_hline(aes(yintercept = as.numeric(variable)), linetype = 2, color = 'grey') + geom_point(aes(x = MeanDecreaseAccuracy, y = variable))
ggplot(fitImp) +  geom_point(aes(x = MeanDecreaseAccuracy, y = variable))
ggplot(fitImp) +  geom_point(aes(x = MeanDecreaseAccuracy, y = as.numeric(variable)))+ geom_hline(aes(yintercept = as.numeric(variable)), linetype = 2, color = 'grey')  + theme_bw()
ggplot(fitImp) +  geom_point(aes(x = MeanDecreaseAccuracy, y = variable))+ geom_hline(aes(yintercept = as.numeric(variable)), linetype = 2, color = 'grey')  + theme_bw()
ggplot(fitImp) +  geom_point(aes(x = MeanDecreaseAccuracy, y = variable))+ geom_hline(aes(yintercept = variable), linetype = 2, color = 'grey')  + theme_bw()
ggplot(fitImp) +  geom_point(aes(x = MeanDecreaseAccuracy, y = variable))+ geom_hline(aes(yintercept = as.numeric(variable)), linetype = 2, color = 'grey')  + theme_bw()
pred.validation <- predict(fit.rf, validation, na.action = na.pass)
confusionMatrix(pred.validation, validation$classe)
pred.testing <- predict(fit.rf, testingQuiz, na.action = na.pass)
testingQuiz <- fread('pml-testing.csv', sep=',')
pred.testing <- predict(fit.rf, testingQuiz, na.action = na.pass)
colnames(testingQuiz)
colnames(testingQuiz) %>% in fitImp[,variable]
colnames(testingQuiz) %in% fitImp[,variable]
fitImp[,variable] %in% colnames(testingQuiz)
pred.testing <- predict(fit.rf, testingQuiz, na.action = na.pass)
colname <- c(colnames(training), 'problem_id')
testing <- testingQuiz[,.SD,SDcols = colname]
testing <- testingQuiz[,.SD, SDcols = colname]
testing <- testingQuiz[,.SD, .SDcols = colname]
colname
testingQuiz[, .SD, SDcols = colname]
testingQuiz,.SD]
testingQuiz[],.SD]
testingQuiz[,.SD]
colnames(training) %>% class
testing <- testingQuiz[, .SD, SDcols = colname]
a <- c('problem_id')
testingQuiz[,.SD,SDcols = a]
testingQuiz[,.SD,.SDcols = a]
testing <- testingQuiz[, .SD, .SDcols = colname]
colname
testingQuiz
colname <- c(colnames(dplyr::select(training, -classe)), 'problem_id')
testing <- testingQuiz[, .SD, .SDcols = colname]
pred.testing <- predict(fit.rf, testing, na.action = na.pass)
targetTable <- table(dataset[, classe]) %>% prop.table() %>% data.table
targetTable
write.csv(testing, 'quiz_result.csv')
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(cache = F)
# Chunk 2: 'load library'
require(data.table);require(dplyr);require(caret);require(gbm);require(ggplot2);require(corrplot);require(knitr);require(rmarkdown);require(randomForest)
# Chunk 3: 'data exploratory'
# load the training set into data table
dataset <- fread('pml-training.csv', sep= ',', row)
testingQuiz <- fread('pml-testing.csv', sep=',')
datasetDim <- dim(dataset)
print('The dimension of training set:')
datasetDim
# remove variable V1 as its just the row number
dataset[, V1:=NULL]
# remove the statistics variables as there are derived from other variables within a specific time window
pattern = '(avg|var|kurtosis|skew|max|min|amplitude)'
statVar <- grep(pattern, colnames(dataset),ignore.case = T, value = T)
dataset[, (statVar):=NULL]
# remove the timestamp and window variables
pattern <- '(timestamp|window)'
timeVar <- grep(pattern, colnames(dataset), ignore.case = T, value = T)
dataset[, (timeVar):=NULL]
# change the target label to factor variable
dataset[, classe:=factor(classe)]
# print out the selected variable and its corresponding class
str(dataset)
# Correlation plot
corMatrix <- cor(dplyr::select(dataset, -classe, -user_name))
corrplot(corMatrix, add =F, diag = F, tl.cex = .5, tl.col = 'black', title = 'Correlation Plot')
# target label
targetTable <- table(dataset[, classe]) %>% prop.table() %>% data.table
setnames(targetTable, c('V1','N'),c('Class', 'Proportion'))
targetTable
kable(targetTable, caption = 'Proportion of Label Class in Training Set')
# Chunk 6: 'model evaluation'
# generate prediction on validation set and its confusion matrix
pred.validation <- predict(fit.rf, validation, na.action = na.pass)
confusionMatrix(pred.validation, validation$classe)
pred.validation <- predict(fit.rf, validation, na.action = na.pass)
fit.rf
